fun main() {
    val test = """###.###..#.....#..#.##..##.#...###.#####..#.##.#####.###..######.#.#.#
....##.#.#.#......#.###..##..###...#.#...####.##...#.#....#.##.##....#
#..#.#.#.##.........#####....#..##.......#.#.#.##....#.#....##..##..##
#.##.##....#.##.#.###.#...#..#.##.####.#.#.#.#.###.###.####....#.#.#.#
.#.#.#####.##...##.##..#..#.#..####.#..#.#.#######..#.##.#.###.#.....#
..#..#....###.#....###.##.#..#..#.#..#.#.#...##...#....##....#..##...#
###..........#..#.###....##.##...#####.###.#.##...#.##.....#.##.#.####
#.###.####...#..#.##.....#.####.##..##...#..##.....#...###..##.######.
.....#.####..##.#...#..##.###..#.##.####..#...#.###..##..#.#.###...#.#
.#.#.#..##.##..#.#.##.#.##.#.##..##.##.#..##.#.##..#####.#.###.#.##..#
###.#.###.##.##....#.#.#...##...#.#..#.#..#.#..##.#....#####...#...###
.#.#.#.#.#..#....###.#.##.#.#.####..#.#.#...#.#.#.###....#....#...##..
#.#....#........#....######...#....#..#.###...#.....###..###...##..#..
.###.##....#.#.#.###..###....#.#.#..###.##..#..#..#####.#.###.#..##..#
..###.##..####.....#...##.#....#...###..#.###.#...##....####........#.
#####.##..#..##..###....#.##....#.#...##.########...#.#.#..##..##..###
.##..#...##.....###.#...#..###.######.#.#...#...##..#.....#..#.##..#.#
.#####..#.######.#..#..#.#.#.##....##..#.......#....#.##.#.#..##...#.#
.#.##..#..###..#.######........##.##.##..#....#.###.######.##.#.#..##.
##.##.#..####.#....###.#..##..#...#.#####.#..#...#....##...#.###..#.##
#....##..#...#.#.###.#.#...##.#.#..###...####..##.#..##.#.#####.....##
.##.#..#.##.##.#.##.....#######..#...#.##.####...#.....#.##..#...##...
#.#.#.#####...#####..#.##....#.#.####.#..#.##..#.#.#...#..##.#...##...
#.#.#.#..#.#.#..#..###.#.....#.#.#..#.#####.#.#..#...#.###.###...#.#..
.####..####.#.#..#...##.##.#....#.#.....#.##.###..#...###.###.#....##.
....##.#.##.###.#..##.#..#.......##...#.###...#.......#..####.#.#.####
....#.#......####..#.#..#..#..#.##..#..#..###..#.#.##.#.##..###..#..#.
.##.#.....##.#..#..#..####..#.#.#...###.##.##.##...#..##..##.##...##..
#..####..#...#.#....##...##..#.....##.#######..#.####...##..######.#..
..#.##.##....##.#######..##...#..#..###.....##.#.#..#.#...##..###.####
#####......##..#.#..#......#..####.####...#####..######...##.###..##..
###..##.#.##....##..######.#.#.#......#..##.#.##.#.##...#.##...###..##
.....#.#.#.##..#.#####.##.#.#.....#.#..#.###.##..#.###.##..##.###....#
.###.####..####.###....####.#.##..##..#.....##.###.##.######.#..#.#...
.#.#######.#.#.###....#####..#.#.#..#.#.#.#.#..##..#..#...##..##..#.#.
.##..####..#.#...###.#...#....####...###.#..#.#.....#.#.##.#..##.#.#..
.#.#.#.#####..##.####..#..##......#..#.###.#..#....#...#....#...#.####
..##.##.###.#..#..#.#..#.###......##.#..#..#.#.####.#.#.#.####.##.....
##.#..#..##.#######..#..#....##..#...########.##.#.#...##...##.##.....
.#...#####.#..##.##.###.####.....###.#......########.#..##.##.#....###
...####.###....##..#..#....#..##.####..##..#..###.......#.#.###.##...#
.#.#......#####...##....#.#..#######.######.#.#.##.#..###..#....##..#.
..###.#.#####..##.#.####....#.###..#..#.##.#####.##..##.##..##..#.##.#
.####.#.######.###.###..#......#...#...#..#..##.###.##.#.####.#.#.##.#
#####.###.##.#########..###..#.#.##.#..#..##...#.###.#.#......###..##.
###...###.##.#.###.#.##.####.#######..##.#....#####.###.#..#.#...###..
.######...#...#..###......#.#.##........#..##.#.#.##.#....###.....##.#
#.#.....##.##.##..##..##.#.##.###.##.###.##.#.##.###....##..#.#.##....
#.####.##...##....#.#.....#.#.###..#..####.....#.##..##...##.###.#..##
#####.##.#...#....#..###.##..##...#....#....##.#.#....#####....####.##
####...##...#.###.##.##.#####...#.....##..#####...########..####......
#.#..##.##.#.######.###.#.##.......#......####..##.#.#.#..##.###.#..#.
#..#..########..##..#.######..#.#...#..#.#####.###.####......##..###.#
#..#.#...#..#....#..##.##.#..###.####.###########.#..#.###.#.##.###..#
##.#..#..#.....#.##.#..######..#..#...#.#...###.#.#.#.#.#.########...#
..###.#.##......###..#...##......#####.#.#....####.....##.#..#.#..#.#.
..######....#..##.#.#..#.##.#..##.##.#....##....###.#.##.##..##....###
.#####....##....###.#.#######.....##.###.#..#.#.#..###...#.##..#..#.#.
#..#####...#..##..#..#..#....#.##....#..##.......##..#....#.#..#.#.###
#.#..#####...#...#...##.#....#..##.#.##....#####.....#.##.....#..#.###
##.#.#....#...#.####....###....#...#.##...##.#....#.#.#.##......##.###
...##.#.#..#.###..#.#...##.#...##.#...##...#..###.#.###...###..#..##.#
.#####...#.#..###.#.##.##.#.##..##.#.#.....##....#.#..#.#.#..#####.###
#.####.####..###......##.....#.#.....##.#..##.##.#....###.....####..##
#..#####...#....#...###..##...###..####..####..#...#####.#####..#.###.
####.###.###....####....##..#..####...#....###.##.#.##...##.......####
.#.###....####..#..#.###.##.##.####..##.#..###..#..#.#.#..#..#.##..##.
....##......####.####.######...###.....###.#.#..##.#.##.......#...#...
##.###.##...#.....#.##.#.......####.##.###..###.#.#..#.##..#.####....#
....#..##.#...##.##.#.#.#..#.#..#..#.####....#####..#.....#####.#....."""

    var board: MutableSet<Pair<Int, Int>> = mutableSetOf()
    for((i, row) in test.split("\n").withIndex()) {
        for((j, c) in row.withIndex()) {
            if (c == '.') continue
            board.add(Pair(i, j))
        }
    }

    val dirs = listOf<Pair<Pair<Int, Int>, List<Pair<Int, Int>>>>(
        Pair(Pair(-1, 0), listOf(Pair(-1, 0), Pair(-1, -1), Pair(-1, 1))),
        Pair(Pair(1, 0), listOf(Pair(1, 0), Pair(1, -1), Pair(1, 1))),
        Pair(Pair(0, -1), listOf(Pair(0, -1), Pair(-1, -1), Pair(1, -1))),
        Pair(Pair(0, 1), listOf(Pair(0, 1), Pair(-1, 1), Pair(1, 1))),
    )

    val ROUNDS = 10000
    for(round in 0 until ROUNDS) {
        val elfProposal: MutableMap<Pair<Int, Int>, Pair<Int, Int>> = mutableMapOf()
        val proposalCounts: MutableMap<Pair<Int, Int>, Int> = mutableMapOf()
        val dir = round % 4
        for(pos in board) {
            var cnt = 0
            for(di in -1..1) {
                for(dj in -1..1) {
                    cnt += if (board.contains(Pair(pos.first + di, pos.second + dj))) 1 else 0
                }
            }
            if (cnt == 1) continue
            for(directionInc in 0 until 4) {
                var good = true
                val directionIndex = (dir + directionInc) % 4
                for(d in dirs[directionIndex].second) {
                    val check = Pair(pos.first + d.first, pos.second + d.second)
                    if (board.contains(check)) {
                        good = false
                        break
                    }
                }
                if (good) {
                    val directionDelta = dirs[directionIndex].first
                    val proposal = Pair(pos.first + directionDelta.first, pos.second + directionDelta.second)
                    elfProposal[pos] = proposal
                    proposalCounts[proposal] = proposalCounts.getOrDefault(proposal, 0) + 1
                    break
                }
            }
        }
        for(pos in board) {
            if (!elfProposal.containsKey(pos)) {
                elfProposal[pos] = pos
            }
        }
        val newBoard: MutableSet<Pair<Int, Int>> = mutableSetOf()
        for(proposal in elfProposal) {
            if (proposalCounts.getOrDefault(proposal.value, 1) > 1) {
                newBoard.add(proposal.key)
            } else {
                newBoard.add(proposal.value)
            }
        }
        if (board == newBoard) {
            println(round + 1)
            return
        }
        board = newBoard
        println(String.format("Round %d", round))
        for(i in -10..10) {
            for(j in -10..10) {
                if (board.contains(Pair(i, j))) print("#") else print(".")
            }
            println()
        }
    }

    var minRow = 1000000
    var maxRow = -1000000
    var minCol = 1000000
    var maxCol = -1000000
    for(entry in board) {
        if (entry.first < minRow) minRow = entry.first
        if (entry.first > maxRow) maxRow = entry.first
        if (entry.second < minCol) minCol = entry.second
        if (entry.second > maxCol) maxCol = entry.second
    }
    println((maxRow - minRow + 1) * (maxCol - minCol + 1) - board.size)
}
